Description
You are given an array of N integers. The frequency of exactly one integer is odd. Find that integer.

Input Format
The first line of the input contains one integer T - the number of test cases. Then T test cases follow.


The first line of each test case contains one integer N - the length of the array.


The second line of each test case contains N space-separated integers.

Output Format
For each test case, print the integer with odd frequency.

Solution:
Approach 1: 

Using map to record frequency

// Write your code here
  // You can set your Template at profile settings [https://maang.in/profile/template-code]
  #include<iostream>
  #include<bits/stdc++.h>

  using namespace std;

  int find_odd_frequency(vector<int> arr,int N)
  { 
    unordered_map<int,int> freq;
    for(int i=0;i<N;i++)
    {
        cin>>arr[i];
        freq[arr[i]]++;
    }

    for(auto x:freq)
    {
        if(x.second%2!=0)
        {
            return x.first;
        }
    }

    return -1;

  }
  


  int main()
  {
    int T=0; //Number of test cases
    int N=0; //Array length
    int res=0;

    cin>>T;
    for(int i=0;i<T;i++)
    {
      cin>>N;
      vector<int> arr(N);
      res=find_odd_frequency(arr,N);
      cout<<res<<endl;
    }
  }

T.C: O(N)
S.C: O(N)

Approach 2:
Sorting the array and traversing it to find frequency

#include<bits/stdc++.h>

using namespace std;

void solve()
{
    int n;
    cin>>n;
    vector<int> arr(n);
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }

    sort(arr.begin(),arr.end());
    for(int i=0;i<n;i++)
    {
        int cnt=1;
        int j=i+1;
        while(j<n&&arr[j]==arr[i])
        {
            cnt++;
            j++;
        }
        if(cnt%2!=0)
        {
            cout<<arr[i]<<endl;
            return;
        }
        i=j-1;
    }

}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);

    int t;
    cin>>t;

    for(int i=0;i<t;i++)
    {
        solve();
    }
}

T.C: O(Nlog(N))+O(N)
S.C: O(1)

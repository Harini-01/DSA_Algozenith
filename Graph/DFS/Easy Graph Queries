Question:
Description
You have given an undirected graph G with N nodes and M edges. You've to answer Q queries. 
Each query is either of the following two types:
1 X: Print the size of the connected components containing node X.
2 X Y: Print ‘YES’ (without quotes) if node X and Y belong to the same 
connected component, else print ‘NO’ (without quotes).

Input Format
The first line of input contains three space-separated integers N, M, and Q (1 ≤ N, M, Q ≤ 105).
Next M lines contain two space-separated integers u and v (1 ≤ u, v ≤ N).
Each of the next Q lines contains queries of one of the types as described in the statement.

Output Format
Print Q lines as the answer to the Q queries, each on a new line.

Constraints
Sample Input 1
6 5 5
1 2
2 3
1 3
4 4
5 6
1 2
1 4
2 3 4
1 5
2 5 6
Sample Output 1
3
1
NO
2
YES


Idea: Use dfs to find record the components, sizes and the component number of each node and then use it.


#include<bits/stdc++.h>
#define int long long

using namespace std;

vector<int> vis;
vector<vector<int>> adj_list;
vector<int> comp_num;
int curr_comp;
vector<int> comp_size;
int curr_comp_size;


void dfs(int node)
{   
    if(vis[node])
    {
        return;
    }
    vis[node] = 1;
    comp_num[node] = curr_comp;
    curr_comp_size++;
    for(int v: adj_list[node])
    {
        if(!vis[v])
        {
            dfs(v);
        }
    }

    return;
}

void solve()
{
    int N, M, Q;
    cin>>N;
    cin>>M;
    cin>>Q;

    int n1, n2;

    vis.assign(N, 0);
    adj_list.resize(N);
    comp_num.assign(N, 0);
 

    for(int i=0;i<M;i++)
    {
        cin>>n1;
        cin>>n2;
        n1--; //bcoz the input is 1 based indexing but the code is for 0 based indexing
        n2--; //bcoz the input is 1 based indexing but the code is for 0 based indexing

        adj_list[n1].push_back(n2);
        adj_list[n2].push_back(n1);
    }


    curr_comp = 0;
    curr_comp_size = 0;
    for(int i=0;i<N;i++)
    {   
        if(!vis[i])
        {   curr_comp_size = 0;
            dfs(i);
            comp_size.push_back(curr_comp_size);
            curr_comp++;
        }
        
    }


    while(Q--)
    {
        int query;
        cin>>query;

        if(query == 1)
        {
            int x;
            cin>>x;
            x--;      //bcoz the input is 1 based indexing but the code is for 0 based indexing

            int comp_num_x = comp_num[x];
            cout<<comp_size[comp_num_x]<<"\n";
        }
        else
        {
            int x;
            int y;
            cin>>x;
            cin>>y;
            x--; //bcoz the input is 1 based indexing but the code is for 0 based indexing
            y--; //bcoz the input is 1 based indexing but the code is for 0 based indexing

            if(comp_num[x] == comp_num[y])
            {
                cout<<"YES\n";
            }
            else
            {
                cout<<"NO\n";
            }
        }
    }
}

signed main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);

    int t=1;
    //cin>>t;

    while(t--)
    {
        solve();
    }
}

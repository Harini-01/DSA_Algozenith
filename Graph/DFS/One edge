Description
You have given an undirected graph with n nodes, and m edges between them. The goal is to add exactly one edge between two nodes 
such that the total number of connected components in the graph decreases. Your task is to find out the number of ways to add such edge.

Input Format
The first input line has two integers n and m: the number of nodes and edges. The nodes are numbered 1, 2, …, n.
After that, there are m lines describing the edges. Each line has two integers a and b: there is an edge between those nodes.
An edge always connects two different nodes, and there is at most one edge between any two nodes.

Output Format
Print the number of ways to add such edge, described in the statement.

Constraints
1 ≤ n ≤ 10^5
1 ≤ m ≤ 2 x 10^5
1 ≤ a, b ≤ n

Sample Input 1
5 4
1 2
2 3
1 3
4 5
Sample Output 1
6

Idea: get the component sizes and then use them to find the result. Nodes of a component can have edges with other component nodes but not the node in the same component.

#include<bits/stdc++.h>
#define int long long

using namespace std;

vector<vector<int>> adj_list;
vector<int> comp_size;
vector<int> vis;
int curr_comp_size = 0;

void dfs(int node)
{
    vis[node] = 1;
    curr_comp_size++;

    for(int neigh : adj_list[node])
    {
        if(!vis[neigh])
        {
            dfs(neigh);
        }
    }
}

void solve()
{
    int N, M;
    cin>>N;
    cin>>M;
    adj_list.resize(N);
    vis.assign(N,0);


    int n1;
    int n2;

    for(int i=0;i<M;i++)
    {
        cin>>n1;
        cin>>n2;
        n1--;
        n2--;

        adj_list[n1].push_back(n2);
        adj_list[n2].push_back(n1);
    }

    for(int i=0;i<N;i++)
    {
        if(!vis[i])
        {   
            curr_comp_size = 0;
            dfs(i);
            comp_size.push_back(curr_comp_size);
        }
    }

    int res = 0;

    
    //Visualise the counting method. Nodes in a component can have edge with other component nodes but not with the nodes in the same component.
    for(int i=0;i<comp_size.size();i++)
    {  
        res+=comp_size[i] * (N - comp_size[i]);
    }

    cout<<res/2<<"\n";

}

signed main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);

    int t=1;
    //cin>>t;

    while(t--)
    {
        solve();
    }

    
}

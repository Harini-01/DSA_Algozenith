Description
Implement a queue using 2 stacks. You will be given the following type of Q queries:

push x - add x to the queue
pop - pop the front element of the queue, you also have to print the element you have popped.
front - find the element at the front of the queue
Input Format
The first line of the input contains one integer T - the number of test cases. Then T test cases follow.
The first line of each test case contains one integer Q - the number of queries
Each of the next Q lines contain the queries.

Output Format
For each test case, print the required queries.
Constraints
1≤ T ≤ 10^6
1≤ Q ≤ 10^6
1≤ X ≤ 10^6
It is guaranteed that the sum of Q over all test cases does not exceed 10^6.

Input:
1
7
push 3
push 5
pop
front
push 7
pop
pop

Output:
3
5
5
7

Code:
#include<bits/stdc++.h>

using namespace std;

void solve()
{
    int n;
    cin>>n;
    string query;
    stack<int> s1;
    stack<int> s2;

    while(n--)
    {
        cin>>query;

        if(query=="push")
        {   
            int ele;
            cin>>ele;
            s1.push(ele);
        }
        else if(query=="pop")
        {
            if(s2.empty())
            {
                while(!s1.empty())
                {
                    s2.push(s1.top());
                    s1.pop();
                }
                cout<<s2.top()<<"\n";
                s2.pop();
            }
            else
            {
                cout<<s2.top()<<"\n";
                s2.pop();
            }
        }
        else if(query=="front")
        {
            if(s2.empty())
            {
                while(!s1.empty())
                {
                    s2.push(s1.top());
                    s1.pop();
                }
                cout<<s2.top()<<"\n";
            }
            else{
                cout<<s2.top()<<"\n";
            }
        }
    }
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);

    int t=1;
    cin>>t;

    for(int i=0;i<t;i++)
    {
        solve();
    }    
}

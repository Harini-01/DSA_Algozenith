You are given Q queries and have to perform the following operations:

add x - add element x in the set
erase x - delete one element with value x, if it exists
eraseall x - delete all elements with value x, if it exists
find x - if x is present print “YES”, else print “NO”
count x - print the number of times x occurs in the set
print - print the values in set
empty - empty the set
Input Format
The first line of the input contains one integer T - the number of test cases. Then T test cases follow.
The first line of each test case contains one integer Q - the number of queries.
Each of the next Q lines contains queries.
The combination of print and n does not exceed 10^8.

Output Format
For each test case, print the required queries.
Constraints
1≤ T ≤ 10^5
1≤ Q ≤ 10^5
1≤ X ≤ 10^6
It is guaranteed that the sum of Q over all test cases does not exceed 10^5.

Sample Input 1
1
13
add 3
add 1
add 5
add 3
add 3
count 3
erase 3
print
eraseall 3
print
find 5
empty
find 5
Sample Output 1
3
1 3 3 5 
1 5 
YES
NO

Note
Multiset becomes: [3]
Multiset becomes: [1, 3]
Multiset becomes: [1, 3, 5]
Multiset becomes: [1, 3, 3, 5]
Multiset becomes: [1, 3, 3, 3, 5]
3 occurs 3 times in the multiset
Multiset becomes: [1, 3, 3, 5]
Multiset is: 1, 3, 3, 5
Multiset becomes: [1, 5]
Multiset is: 1, 5
5 exists in the multiset
Multiset becomes empty
5 does not exist in the multiset

Code:
#include<bits/stdc++.h>
#define int long long

using namespace std;

void solve()
{
    int q;
    cin>>q;
    string query;
    multiset<int> ms;

    while(q--)
    {
        cin>>query;
        if(query=="add") // O(log N)
        {
            int ele;
            cin>>ele;
            ms.insert(ele);
        }
        else if(query=="erase") // O(log N)
        {
            int ele;
            cin>>ele;
            auto it=ms.find(ele); // O(log N)
            if(it!=ms.end())
            {
                ms.erase(it); // O(1) (for single element erase using iterator)
            }
        }
        else if(query=="eraseall") // O(N) (erases all occurrences)
        {
            int ele;
            cin>>ele;
            if(ms.find(ele)!=ms.end()) // O(log N)
            {
                 ms.erase(ele); // O(N) (since erase(ele) removes all occurrences)
            }
        }
        else if (query=="find") // O(log N)
        {
            int ele;
            cin>>ele;
            if(ms.find(ele)!=ms.end()) // O(log N)
            {
                cout<<"YES\n";
            }
            else 
            {
                cout<<"NO\n";
            }
        }
        else if(query=="count") // O(log N) + O(N) worst case
        {
            int ele;
            cin>>ele;
            cout<<ms.count(ele)<<"\n"; // O(log N) in most cases, O(N) worst case if all elements are the same
        }
        else if(query=="print") // O(N)
        {
            for(auto x:ms)
            {
                cout<<x<<" ";
            }
            cout<<"\n";
        }
        else if(query=="empty") // O(N)
        {
            ms.clear(); // O(N) (erases all elements)
        }
    }
}

signed main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);

    int t=1;
    cin>>t;

    while(t--)
    {
        solve();
    }
}
